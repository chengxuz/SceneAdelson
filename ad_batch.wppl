
// Define some constants
var col_num = 5
var row_num = 5
var num_rep = col_num*row_num
//var mcmc_sample_num     = 30000
var mcmc_sample_num     = 30000
var dist_sample_num     = 20000
var shadow_prior        = 0.05
var shadow_decill       = 1

// Get parameters from command line
var mu_illu     = ndarray.string_to_float(process.argv[3])
var mu_refl     = ndarray.string_to_float(process.argv[4])
var sigma_all   = ndarray.string_to_float(process.argv[5])
var sigma_diff  = ndarray.string_to_float(process.argv[6])

var sigma_shad_diff     = 0.1

// Define some help function to provide priors
var reflect_build_prior =  function() {return gaussian({mu: mu_refl, sigma: sigma_all})}
var shadow_build_prior  =  function() {return flip(shadow_prior)}

// Define the luminance matrix (the pixel map)
//var lum_list    = [1, 3, 1, 10, 10, 3, 1, 5, 10, 10, 1, 5, 3, 5, 1, 5, 3, 5, 1, 3, 3, 5, 1, 3, 1]
//var lum_list    = [5, 3, 5, 3, 5,   3, 5, 1, 3, 1,   5, 1, 3, 1, 5, 1, 3, 1, 5, 3, 3, 1, 5, 3, 5]

var lum_list    = [6, 3, 6, 3, 6,   3, 6, 1, 3, 1,   6, 1, 3, 1, 6, 1, 3, 1, 6, 3, 3, 1, 6, 3, 6]

// Define where the object is
var obj_list    = [0, 0, 0, 1, 1,   0, 0, 0, 1, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
var obj_pos_list    = [3, 4, 8, 9]

var x_delta_list    =  [-1, 1, 0, 0, 0, -1, 1, -1, 1]
var y_delta_list    =  [0, 0, -1, 1, 0, 1, 1, -1, -1]
var light_array     = [[1, -1],[-1, 1],
                       [0, -1],[0, 1],
                       [-1, -1],[1, 1],
                       [-1, 0],[1, 0]]
var light_range = [[3, 6], [7, 2],
                   [4, 7], [0, 3],
                   [5, 0], [1, 4],
                   [6, 1], [2, 5]]
var cube_light = [1,1,1,3]
var dark_light = 1
var brig_light = 3

var light_sigma_light   = 0.5

var fun_big_observe = function(tmp_observe, index_want, index_want2, want_img) {
  var fun_light = Infer({method: 'MCMC', samples: mcmc_sample_num}, function(){
    var light_dire   = discrete({ps: [1,1,1,1,
                                      1,1,1,1]})
	var func_help_light = function(curr_indx){
		var max_light = light_range[light_dire][1]
		var min_light = light_range[light_dire][0]
		if (min_light < max_light){
		    if (curr_indx <=max_light && curr_indx >=min_light){
			  observe(Gaussian({mu: brig_light, sigma: light_sigma_light}), cube_light[curr_indx])
		    } else {
			  observe(Gaussian({mu: dark_light, sigma: light_sigma_light}), cube_light[curr_indx])
		    }
		} else {
		    if (curr_indx >=max_light || curr_indx <=min_light){
			    observe(Gaussian({mu: brig_light, sigma: light_sigma_light}), cube_light[curr_indx])
		    } else {
			    observe(Gaussian({mu: dark_light, sigma: light_sigma_light}), cube_light[curr_indx])
		    }      
		}
	}

    map(func_help_light, _.range(4))
    return light_dire
  })

  var light_dire_dist   = fun_light

  var illu_build_prior      = function(mu_illu_now){
      var illuminationPrior     = Infer({method: 'MCMC', samples: mcmc_sample_num}, function() {

        var illumination = map(function(indx_now){return gaussian({mu: mu_illu_now, sigma: sigma_all})}, _.range(num_rep))

        var build_env_fun = function(curr_indx){
            if (obj_list[curr_indx]==1){
                return
            }
            var sum_all_i   = []
            var num_all_i   = []

            var curr_x  = curr_indx%col_num
            var curr_y  = (curr_indx - curr_x)/col_num

            var border_help_fun = function(indx_delta){
                var new_x   = curr_x + x_delta_list[indx_delta]
                var new_y   = curr_y + y_delta_list[indx_delta]
                var new_indx    = new_x + new_y*col_num

                if ((new_x > -1) && (new_x < col_num) && (new_y > -1) && (new_y < row_num)){

                    if (obj_list[new_indx]==0){
                        if (indx_delta<4){
                            num_all_i.push(2)
                            sum_all_i.push(2*illumination[new_indx])
                        } 
                        if (indx_delta>4){
                            num_all_i.push(1)
                            sum_all_i.push(illumination[new_indx])
                        }
                    }
                }
            }
            map(border_help_fun, _.range(9))

            var illu_ave    = sum(sum_all_i)/sum(num_all_i)
            var illu_diff   = illumination[curr_indx] - illu_ave
            observe(Gaussian({mu: illu_diff, sigma: sigma_diff}), 0)
        }

        map(build_env_fun, _.range(num_rep))
        return illumination
      })
      return illuminationPrior
  }

  var illu_prior    = illu_build_prior(mu_illu)
  var illu_prior_s  = illu_build_prior(mu_illu - shadow_decill)

  var reflectancePosterior = Infer({method: 'MCMC', samples: mcmc_sample_num}, function() {
    var reflect_list = repeat(num_rep, reflect_build_prior)

    var shadow_list  = map(function(indx_now){
        if (obj_list[indx_now]==1) {return 1} else {return flip(shadow_prior)}
    }, _.range(num_rep))

    var illumination_o = sample(illu_prior)
    var illumination_s = sample(illu_prior_s)
    var illumination    = map(function(curr_indx){
        if (shadow_list[curr_indx]==1){
            return illumination_s[curr_indx]
        } else {
            return illumination_o[curr_indx]
        }
    }, _.range(num_rep))

    var light_dire   = sample(light_dire_dist)

    var lumin_list = map(function(indx_now){return reflect_list[indx_now] * illumination[indx_now]}, _.range(num_rep))

    var build_env_fun = function(curr_indx){
        if (obj_list[curr_indx]==1){
            return
        }

        var curr_x  = curr_indx%col_num
        var curr_y  = (curr_indx - curr_x)/col_num

        var shadow_help_fun = function(indx_obj){
            var obj_curr_x  = obj_pos_list[indx_obj]%col_num
            var obj_curr_y  = (obj_pos_list[indx_obj] - obj_curr_x)/col_num

            var delta_x     = curr_x - obj_curr_x
            var delta_y     = curr_y - obj_curr_y

            if (delta_x*light_array[light_dire][1]==delta_y*light_array[light_dire][0]){
                observe(Gaussian({mu: shadow_list[curr_indx], sigma: sigma_shad_diff}), 1)
            }
        }
        map(shadow_help_fun, _.range(4))
    }
    map(build_env_fun, _.range(num_rep))

    if (want_img==0){
        var obs_help_func       = function (indx_need){
            if (obj_list[indx_need]==0){
                observe(Gaussian({mu: lumin_list[indx_need], sigma: sigma_all}), tmp_observe[indx_need])
            }
        }
        map(obs_help_func, _.range(num_rep))

        //return [reflect_list[index_want] , reflect_list[index_want2]]
        return [reflect_list[index_want] , reflect_list[index_want2], reflect_list, illumination]
        //return [reflect_list[index_want] , reflect_list[index_want2], shadow_list[index_want], shadow_list[index_want2], light_dire]
        //return [reflect_list[index_want] , reflect_list[index_want2], shadow_list[7], shadow_list[13]]

    } else {
        var obs_help_func   = function (indx_need){
            if (indx_need!=index_want && indx_need!=index_want2 && obj_list[indx_need]==0) {
                observe(Gaussian({mu: lumin_list[indx_need], sigma: sigma_all}), tmp_observe[indx_need])
            }
        }
        map(obs_help_func, _.range(num_rep))

        var diff_two_want   = reflect_list[index_want] - reflect_list[index_want2]
        observe(Gaussian({mu: diff_two_want, sigma: sigma_diff}), 0)
        return [lumin_list[index_want], lumin_list[index_want2]]
    }
  });

  return reflectancePosterior
}

var current_ref_dist = fun_big_observe(lum_list, 1, 12, 0);
var all_samples_ref  = repeat(dist_sample_num, function() {return sample(current_ref_dist)})
var list_ref_1      = map(function(now_tmp_l) {return now_tmp_l[0]}, all_samples_ref)
var list_ref_2      = map(function(now_tmp_l) {return now_tmp_l[1]}, all_samples_ref)
//var list_sha_1      = map(function(now_tmp_l) {return now_tmp_l[2]}, all_samples_ref)
//var list_sha_2      = map(function(now_tmp_l) {return now_tmp_l[3]}, all_samples_ref)
//var list_lig_d      = map(function(now_tmp_l) {return now_tmp_l[4]}, all_samples_ref)
var ref_1_value     = listMean(list_ref_1)
var ref_2_value     = listMean(list_ref_2)
//var sha_1_value     = listMean(list_sha_1)
//var sha_2_value     = listMean(list_sha_2)
//var light_dire      = listMean(list_lig_d)
console.log([ref_1_value, ref_2_value])
//console.log([sha_1_value, sha_2_value])
//console.log(light_dire)

var list_ill_test   = map(function(now_tmp_l) {return now_tmp_l[3]}, all_samples_ref)
var list_ill_each   = map(function(curr_indx){return map(function(now_tmp_l) {return now_tmp_l[curr_indx]}, list_ill_test)}, _.range(num_rep))
var mean_ill_each   = map(function(now_list){return listMean(now_list)}, list_ill_each)
console.log(mean_ill_each)

var list_ref_test   = map(function(now_tmp_l) {return now_tmp_l[2]}, all_samples_ref)
var list_ref_each   = map(function(curr_indx){return map(function(now_tmp_l) {return now_tmp_l[curr_indx]}, list_ref_test)}, _.range(num_rep))
var mean_ref_each   = map(function(now_list){return listMean(now_list)}, list_ref_each)
console.log(mean_ref_each)

/*
var current_lumin_dist = fun_big_observe(lum_list, 1, 12,1);
var all_samples_lum    = repeat(dist_sample_num, function() {return sample(current_lumin_dist)})
var list_lum_1      = map(function(now_tmp_l) {return now_tmp_l[0]}, all_samples_lum)
var list_lum_2      = map(function(now_tmp_l) {return now_tmp_l[1]}, all_samples_lum)
var lum_1_value     = listMean(list_lum_1)
var lum_2_value     = listMean(list_lum_2)
console.log([lum_1_value, lum_2_value])
*/
