
// Define some constants
var col_num = 6
var row_num = 3
var num_rep = col_num*row_num
var mcmc_sample_num     = 30000
var dist_sample_num     = 20000

// Get parameters from command line
var mu_illu     = ndarray.string_to_float(process.argv[3])
var mu_refl     = ndarray.string_to_float(process.argv[4])
var sigma_all   = ndarray.string_to_float(process.argv[5])
var sigma_diff  = ndarray.string_to_float(process.argv[6])

var cov_array   = [1, 0.4, 0.2]

// Define some help function
var reflect_build_prior =  function() {return gaussian({mu: mu_refl, sigma: sigma_all})}
var illumin_build_prior =  function() {return gaussian({mu: mu_illu, sigma: sigma_all})}

var fst_lev_fun_ipr     = function(curr_indx) {
    var curr_x  = curr_indx%col_num
    var curr_y  = (curr_indx - curr_x)/col_num

    var scd_lev_fun_ipr = function(now_indx){
        var curr_x_i    = now_indx%col_num
        var curr_y_i    = (now_indx - curr_x_i)/col_num
        var x_diff      = Math.abs(curr_x - curr_x_i)
        var y_diff      = Math.abs(curr_y - curr_y_i)
        var abs_diff    = x_diff + y_diff
        if (abs_diff < 3 && x_diff<2 && y_diff<2){
            return cov_array[abs_diff]*sigma_all
        } else {
            return 0
        }
    }

    return map(scd_lev_fun_ipr, _.range(num_rep))
}

var cov_array   = map(fst_lev_fun_ipr, _.range(num_rep))
var cov_mat     = Matrix(cov_array)
var mu_ten      = Vector(repeat(num_rep, function(){return mu_illu}))

// Define the luminance matrix (the pixel map)
var lum_list = [5,5,5, 1,1,1, 5,3,5, 1,3,1, 5,5,5, 1,1,1]

var fun_big_observe = function(tmp_observe, index_want, index_want2, want_img) {
  var illuminationPrior     = Infer({method: 'MCMC', samples: mcmc_sample_num}, function() {
    var illumination = repeat(num_rep, illumin_build_prior)
    var build_env_fun = function(curr_indx){
        var sum_all_i   = []

        var x_delta_list = [-1, 1, 0, 0, 0]
        var y_delta_list = [0, 0, -1, 1, 0]

        var curr_x  = curr_indx%col_num
        var curr_y  = (curr_indx - curr_x)/col_num

        var border_help_fun = function(indx_delta){
            var new_x   = curr_x + x_delta_list[indx_delta]
            var new_y   = curr_y + y_delta_list[indx_delta]
            if ((new_x > -1) && (new_x < col_num) && (new_y > -1) && (new_y < row_num)){
                var new_indx    = new_x + new_y*col_num
                if (indx_delta!=4){
                    sum_all_i.push(illumination[new_indx])
                }
            }
        }
        map(border_help_fun, _.range(5))

        var illu_ave    = listMean(sum_all_i)
        var illu_diff   = illumination[curr_indx] - illu_ave
        observe(Gaussian({mu: illu_diff, sigma: sigma_diff}), 0)
    }

    map(build_env_fun, _.range(num_rep))
    return illumination
  })

  var illu_prior    = illuminationPrior
  var reflectancePosterior = Infer({method: 'MCMC', samples: mcmc_sample_num}, function() {
    var reflect_list = repeat(num_rep, reflect_build_prior)
    //var illumination_sam = sample(MultivariateGaussian({mu: mu_ten, cov: cov_mat}))
    //console.log(illumination_sam)
    //var illumination = map(function(curr_indx){return illumination_sam["data"][curr_indx]}, _.range(num_rep))
    //var illumination = repeat(num_rep, illumin_build_prior)
    var illumination = sample(illu_prior)
    //var mul_factor   = gaussian({mu: mu_illu/mu_refl, sigma: sigma_all})
    //var mul_factor   = gaussian({mu: 1/mu_refl, sigma: sigma_all})

    var lumin_list = map(function(indx_now){return reflect_list[indx_now] * illumination[indx_now]}, _.range(num_rep))
    //console.log(illumination)
    //console.log(lumin_list)

    /*
    var build_env_fun = function(curr_indx){
        var sum_all = []
        //var num_all = []
        var sum_all_i   = []

        var x_delta_list = [-1, 1, 0, 0, 0]
        var y_delta_list = [0, 0, -1, 1, 0]

        var curr_x  = curr_indx%col_num
        var curr_y  = (curr_indx - curr_x)/col_num

        var border_help_fun = function(indx_delta){
            var new_x   = curr_x + x_delta_list[indx_delta]
            var new_y   = curr_y + y_delta_list[indx_delta]
            if ((new_x > -1) && (new_x < col_num) && (new_y > -1) && (new_y < row_num)){
                var new_indx    = new_x + new_y*col_num
                //num_all.push(1)
                //sum_all.push(reflect_list[new_indx])
                sum_all.push(lumin_list[new_indx])
                if (indx_delta!=4){
                    sum_all_i.push(illumination[new_indx])
                }
            }
        }
        map(border_help_fun, _.range(5))

        //var average_all = sum(sum_all)/sum(num_all)
        var average_all = listMean(sum_all)
        var diff_all    = mul_factor*average_all - illumination[curr_indx]
        //observe(Gaussian({mu: diff_all, sigma: sigma_diff}), 0)
        var illu_ave    = listMean(sum_all_i)
        var illu_diff   = illumination[curr_indx] - illu_ave
        observe(Gaussian({mu: illu_diff, sigma: sigma_diff}), 0)
    }

    map(build_env_fun, _.range(num_rep))
    */

    if (want_img==0){

        var obs_help_func       = function (indx_need){observe(Gaussian({mu: lumin_list[indx_need], sigma: sigma_all}), tmp_observe[indx_need])}
        map(obs_help_func, _.range(num_rep))

        return [reflect_list[index_want] , reflect_list[index_want2], reflect_list, illumination]

    } else {

        var obs_help_func   = function (indx_need){
            if (indx_need!=index_want && indx_need!=index_want2) {
                observe(Gaussian({mu: lumin_list[indx_need], sigma: sigma_all}), tmp_observe[indx_need])
            }
        }
        map(obs_help_func, _.range(num_rep))

        var diff_two_want   = reflect_list[index_want] - reflect_list[index_want2]
        observe(Gaussian({mu: diff_two_want, sigma: sigma_diff}), 0)
        return [lumin_list[index_want], lumin_list[index_want2]]
    }
  });

  return reflectancePosterior
}

var current_ref_dist = fun_big_observe(lum_list, 7, 10, 0);
var all_samples_ref  = repeat(dist_sample_num, function() {return sample(current_ref_dist)})
var list_ref_1      = map(function(now_tmp_l) {return now_tmp_l[0]}, all_samples_ref)
var list_ref_2      = map(function(now_tmp_l) {return now_tmp_l[1]}, all_samples_ref)
var ref_1_value     = listMean(list_ref_1)
var ref_2_value     = listMean(list_ref_2)
console.log([ref_1_value, ref_2_value])

/*
var current_lumin_dist = fun_big_observe(lum_list, 7, 10,1);
var all_samples_lum    = repeat(dist_sample_num, function() {return sample(current_lumin_dist)})
var list_lum_1      = map(function(now_tmp_l) {return now_tmp_l[0]}, all_samples_lum)
var list_lum_2      = map(function(now_tmp_l) {return now_tmp_l[1]}, all_samples_lum)
var lum_1_value     = listMean(list_lum_1)
var lum_2_value     = listMean(list_lum_2)
console.log([lum_1_value, lum_2_value])

var lum_list_new = [5,5,5, 1,1,1, 5,lum_1_value,5, 1,lum_2_value,1, 5,5,5, 1,1,1]
var img_width   = 180
var img_heigh   = 90
var channel_num = 3
var grid_size   = 30

var func_generate_img = function(lum_list_new, img_width, img_heigh, channel_num, grid_size){
    var big_raw     = repeat(img_width*img_heigh*channel_num, function() {return 0})
    var big_array   = ndarray.ndarray(big_raw, [img_width, img_heigh, channel_num])
    var big_size    = img_width*img_heigh
    var big_set_help_fun    = function(indx_now){
        var curr_x      = indx_now % img_width
        var curr_y      = (indx_now - curr_x)/img_width

        var new_indx    = (curr_y - curr_y%grid_size)/grid_size*(img_width/grid_size) + (curr_x - curr_x%grid_size)/grid_size
        map(function(chan_indx) {big_array.set(curr_x, curr_y, chan_indx, lum_list_new[new_indx]*30 + 50)}, _.range(channel_num))
    }
    map(big_set_help_fun, _.range(big_size))
    return big_array
}

var big_array   = func_generate_img(lum_list_new, img_width, img_heigh, channel_num, grid_size)
//var name_prefix = "results/result_img_"
//var name_prefix = "results_2_result_img_"
var name_prefix = "results_3_result_img_"
savePixels.savePixels(big_array, "png", name_prefix.concat(process.argv[3]).concat("_").concat(process.argv[4]).concat("_").concat(process.argv[5]).concat("_").concat(process.argv[6]).concat(".png"))

var lum_list_new = [5,5,5, 1,1,1, 5,lum_2_value,5, 1,lum_1_value,1, 5,5,5, 1,1,1]
var big_array   = func_generate_img(lum_list_new, img_width, img_heigh, channel_num, grid_size)
//var name_prefix = "results_result_img_"
savePixels.savePixels(big_array, "png", name_prefix.concat(process.argv[3]).concat("_").concat(process.argv[4]).concat("_").concat(process.argv[5]).concat("_").concat(process.argv[6]).concat("_re.png"))

console.log('Ah, done!')
*/
